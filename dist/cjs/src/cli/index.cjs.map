{"version":3,"file":"index.cjs","sources":["../../../../../src/cli/index.ts"],"sourcesContent":["import { Command } from 'commander';\r\nimport { initializeSSR, configureMiddleware } from './commands';\r\n\r\nconst program = new Command();\r\n\r\n// Define CLI version and description\r\nprogram\r\n  .version('1.0.0')\r\n  .description('AeroSSR CLI for managing server-side rendering configurations');\r\n\r\n// Command to initialize a new SSR project\r\nprogram\r\n  .command('init')\r\n  .description('Initialize a new AeroSSR project')\r\n  .option('-d, --directory <path>', 'Specify the directory for the project', '.')\r\n  .action((options) => {\r\n    const directory = options.directory;\r\n    initializeSSR(directory);\r\n    console.log(`Initialized a new AeroSSR project in ${directory}`);\r\n  });\r\n\r\n// Command to configure middlewares\r\nprogram\r\n  .command('middleware')\r\n  .description('Configure middlewares for AeroSSR')\r\n  .option('-n, --name <name>', 'Specify middleware name')\r\n  .option('-p, --path <path>', 'Specify middleware path')\r\n  .action((options) => {\r\n    const { name, path } = options;\r\n    if (!name || !path) {\r\n      console.error('Both middleware name and path are required.');\r\n      return;\r\n    }\r\n    configureMiddleware(name, path);\r\n    console.log(`Middleware ${name} configured at ${path}`);\r\n  });\r\n\r\n// Command to view configuration\r\nprogram\r\n  .command('config')\r\n  .description('View or update AeroSSR configuration')\r\n  .option('-u, --update <key=value>', 'Update a configuration key-value pair')\r\n  .action((options) => {\r\n    if (options.update) {\r\n      const [key, value] = options.update.split('=');\r\n      if (!key || !value) {\r\n        console.error('Invalid key-value pair for configuration update.');\r\n        return;\r\n      }\r\n      // Placeholder for updating the configuration\r\n      console.log(`Configuration updated: ${key} = ${value}`);\r\n    } else {\r\n      // Placeholder for displaying the configuration\r\n      console.log('Displaying current configuration...');\r\n    }\r\n  });\r\n\r\n// Parse the CLI arguments\r\nprogram.parse(process.argv);\r\n"],"names":["Command","initializeSSR","configureMiddleware","process"],"mappings":";;;;;;AAGA,MAAM,OAAO,GAAG,IAAIA,8BAAO,EAAE,CAAC;AAE9B;AACA,OAAO;KACJ,OAAO,CAAC,OAAO,CAAC;KAChB,WAAW,CAAC,+DAA+D,CAAC,CAAC;AAEhF;AACA,OAAO;KACJ,OAAO,CAAC,MAAM,CAAC;KACf,WAAW,CAAC,kCAAkC,CAAC;AAC/C,KAAA,MAAM,CAAC,wBAAwB,EAAE,uCAAuC,EAAE,GAAG,CAAC;AAC9E,KAAA,MAAM,CAAC,CAAC,OAAO,KAAI;AAClB,IAAA,MAAM,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;IACpCC,sBAAa,CAAC,SAAS,CAAC,CAAC;AACzB,IAAA,OAAO,CAAC,GAAG,CAAC,wCAAwC,SAAS,CAAA,CAAE,CAAC,CAAC;AACnE,CAAC,CAAC,CAAC;AAEL;AACA,OAAO;KACJ,OAAO,CAAC,YAAY,CAAC;KACrB,WAAW,CAAC,mCAAmC,CAAC;AAChD,KAAA,MAAM,CAAC,mBAAmB,EAAE,yBAAyB,CAAC;AACtD,KAAA,MAAM,CAAC,mBAAmB,EAAE,yBAAyB,CAAC;AACtD,KAAA,MAAM,CAAC,CAAC,OAAO,KAAI;AAClB,IAAA,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,OAAO,CAAC;AAC/B,IAAA,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;AAClB,QAAA,OAAO,CAAC,KAAK,CAAC,6CAA6C,CAAC,CAAC;QAC7D,OAAO;AACR,KAAA;AACD,IAAAC,4BAAmB,CAAC,IAAU,CAAC,CAAC;IAChC,OAAO,CAAC,GAAG,CAAC,CAAA,WAAA,EAAc,IAAI,CAAkB,eAAA,EAAA,IAAI,CAAE,CAAA,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC;AAEL;AACA,OAAO;KACJ,OAAO,CAAC,QAAQ,CAAC;KACjB,WAAW,CAAC,sCAAsC,CAAC;AACnD,KAAA,MAAM,CAAC,0BAA0B,EAAE,uCAAuC,CAAC;AAC3E,KAAA,MAAM,CAAC,CAAC,OAAO,KAAI;IAClB,IAAI,OAAO,CAAC,MAAM,EAAE;AAClB,QAAA,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AAC/C,QAAA,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE;AAClB,YAAA,OAAO,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAC;YAClE,OAAO;AACR,SAAA;;QAED,OAAO,CAAC,GAAG,CAAC,CAAA,uBAAA,EAA0B,GAAG,CAAM,GAAA,EAAA,KAAK,CAAE,CAAA,CAAC,CAAC;AACzD,KAAA;AAAM,SAAA;;AAEL,QAAA,OAAO,CAAC,GAAG,CAAC,qCAAqC,CAAC,CAAC;AACpD,KAAA;AACH,CAAC,CAAC,CAAC;AAEL;AACA,OAAO,CAAC,KAAK,CAACC,6BAAO,CAAC,IAAI,CAAC;;"}