{"version":3,"file":"SecurityMiddleware.cjs","sources":["../../../../src/middlewares/SecurityMiddleware.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from 'http';\r\n\r\nexport class SecurityMiddleware {\r\n  static csrfProtection(req: IncomingMessage, res: ServerResponse, next: () => void): void {\r\n    const token = req.headers['x-csrf-token'];\r\n    if (!token || token !== 'your-csrf-token') {\r\n      res.writeHead(403, { 'Content-Type': 'text/plain' });\r\n      res.end('CSRF token missing or invalid');\r\n      return;\r\n    }\r\n    next();\r\n  }\r\n\r\n  static rateLimit(limit: number, windowMs: number): (req: IncomingMessage, res: ServerResponse, next: () => void) => void {\r\n    const requests = new Map<string, { count: number; timestamp: number }>();\r\n\r\n    return (req, res, next) => {\r\n      const ip = req.socket.remoteAddress || '';\r\n      const now = Date.now();\r\n      const record = requests.get(ip) || { count: 0, timestamp: now };\r\n\r\n      if (now - record.timestamp > windowMs) {\r\n        requests.set(ip, { count: 1, timestamp: now });\r\n        next();\r\n        return;\r\n      }\r\n\r\n      record.count += 1;\r\n      requests.set(ip, record);\r\n\r\n      if (record.count > limit) {\r\n        res.writeHead(429, { 'Content-Type': 'text/plain' });\r\n        res.end('Too many requests');\r\n        return;\r\n      }\r\n\r\n      next();\r\n    };\r\n  }\r\n\r\n  static securityHeaders(req: IncomingMessage, res: ServerResponse, next: () => void): void {\r\n    res.setHeader('X-Content-Type-Options', 'nosniff');\r\n    res.setHeader('X-Frame-Options', 'DENY');\r\n    res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');\r\n    res.setHeader('Content-Security-Policy', \"default-src 'self'\");\r\n    next();\r\n  }\r\n\r\n  static sanitizeInput(req: IncomingMessage, res: ServerResponse, next: () => void): void {\r\n    // A placeholder for sanitizing inputs from query, body, or headers\r\n    // Implement as per application needs, e.g., escape special characters\r\n    next();\r\n  }\r\n}\r\n"],"names":[],"mappings":";;MAEa,kBAAkB,CAAA;AAC7B,IAAA,OAAO,cAAc,CAAC,GAAoB,EAAE,GAAmB,EAAE,IAAgB,EAAA;QAC/E,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC1C,QAAA,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,iBAAiB,EAAE;YACzC,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,YAAY,EAAE,CAAC,CAAC;AACrD,YAAA,GAAG,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;YACzC,OAAO;AACR,SAAA;AACD,QAAA,IAAI,EAAE,CAAC;KACR;AAED,IAAA,OAAO,SAAS,CAAC,KAAa,EAAE,QAAgB,EAAA;AAC9C,QAAA,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAgD,CAAC;AAEzE,QAAA,OAAO,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;YACxB,MAAM,EAAE,GAAG,GAAG,CAAC,MAAM,CAAC,aAAa,IAAI,EAAE,CAAC;AAC1C,YAAA,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AACvB,YAAA,MAAM,MAAM,GAAG,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;AAEhE,YAAA,IAAI,GAAG,GAAG,MAAM,CAAC,SAAS,GAAG,QAAQ,EAAE;AACrC,gBAAA,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC,CAAC;AAC/C,gBAAA,IAAI,EAAE,CAAC;gBACP,OAAO;AACR,aAAA;AAED,YAAA,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC;AAClB,YAAA,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;AAEzB,YAAA,IAAI,MAAM,CAAC,KAAK,GAAG,KAAK,EAAE;gBACxB,GAAG,CAAC,SAAS,CAAC,GAAG,EAAE,EAAE,cAAc,EAAE,YAAY,EAAE,CAAC,CAAC;AACrD,gBAAA,GAAG,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;gBAC7B,OAAO;AACR,aAAA;AAED,YAAA,IAAI,EAAE,CAAC;AACT,SAAC,CAAC;KACH;AAED,IAAA,OAAO,eAAe,CAAC,GAAoB,EAAE,GAAmB,EAAE,IAAgB,EAAA;AAChF,QAAA,GAAG,CAAC,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;AACnD,QAAA,GAAG,CAAC,SAAS,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;AACzC,QAAA,GAAG,CAAC,SAAS,CAAC,2BAA2B,EAAE,qCAAqC,CAAC,CAAC;AAClF,QAAA,GAAG,CAAC,SAAS,CAAC,yBAAyB,EAAE,oBAAoB,CAAC,CAAC;AAC/D,QAAA,IAAI,EAAE,CAAC;KACR;AAED,IAAA,OAAO,aAAa,CAAC,GAAoB,EAAE,GAAmB,EAAE,IAAgB,EAAA;;;AAG9E,QAAA,IAAI,EAAE,CAAC;KACR;AACF;;;;"}