!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("http"),require("fs"),require("url"),require("path"),require("zlib"),require("util"),require("crypto"),require("fs/promises")):"function"==typeof define&&define.amd?define(["http","fs","url","path","zlib","util","crypto","fs/promises"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).AeroSSR=t(e.http,e.fs,e.url,e.path,e.zlib,e.util,e.crypto,e.fs$1)}(this,(function(e,t,i,r,s,n,o,a){"use strict";class l{constructor(e={}){if(this.logFilePath=e.logFilePath||null,this.logFilePath)try{const e=r.dirname(this.logFilePath);t.existsSync(e)||t.mkdirSync(e,{recursive:!0}),t.accessSync(this.logFilePath,t.constants.W_OK|t.constants.R_OK)}catch(e){console.error(`Logger initialization failed for path: ${this.logFilePath} - ${e.message}`),this.logFilePath=null}}log(e){const i=`[${(new Date).toISOString()}] ${e}`;console.log(i),this.logFilePath&&t.appendFile(this.logFilePath,`${i}\n`,(e=>{e&&console.error(`Failed to write to log file: ${e.message}`)}))}logRequest(e){const{method:t,url:i}=e;this.log(`${t} ${i}`)}}function c(){const e=new Map;return{get:t=>e.get(t),set:(t,i)=>{e.set(t,i)},clear:()=>e.clear()}}function h(e,t="*"){e.setHeader("Access-Control-Allow-Origin",t),e.setHeader("Access-Control-Allow-Methods","GET, POST, OPTIONS, HEAD"),e.setHeader("Access-Control-Allow-Headers","Content-Type, Authorization"),e.setHeader("Access-Control-Max-Age","86400")}async function d(e,t=new Set){if(t.has(e))return t;t.add(e);const i=(await a.readFile(e,"utf-8")).match(/(?:require|import)\s*\(['"]([^'"]+)['"]\)/g);if(i)for(const s of i){const i=s.match(/['"]([^'"]+)['"]/)?.[1];if(i){const s=r.resolve(r.dirname(e),i);(s.endsWith(".js")||s.endsWith(".ts"))&&await d(s,t)}}return t}async function u(e,t){const i=r.join(e,t),s=await d(i);let n="";for(const t of s){const i=await a.readFile(t,"utf-8");n+=`\n// File: ${r.relative(e,t)}\n${i}\n`}return n.replace(/\/\*[\s\S]*?\*\/|([^\\:]|^)\/\/.*$/gm,"").replace(/\s+/g," ").replace(/^\s+|\s+$/gm,"")}const g=n.promisify(s.gzip);return class{constructor(e={}){this.config={port:e.port||3e3,cacheMaxAge:e.cacheMaxAge||3600,corsOrigins:e.corsOrigins||"*",compression:!1!==e.compression,logFilePath:e.logFilePath||null,bundleCache:e.bundleCache||c(),templateCache:e.templateCache||c(),defaultMeta:{title:"AeroSSR App",description:"Built with AeroSSR bundler",charset:"UTF-8",viewport:"width=device-width, initial-scale=1.0",...e.defaultMeta}},this.logger=new l({logFilePath:this.config.logFilePath}),this.server=null,this.routes=new Map,this.middlewares=[]}use(e){this.middlewares.push(e)}route(e,t){this.routes.set(e,t)}clearCache(){this.config.bundleCache.clear(),this.config.templateCache.clear()}async executeMiddlewares(e,t,i=0){i>=this.middlewares.length||await this.middlewares[i](e,t,(()=>this.executeMiddlewares(e,t,i+1)))}async handleRequest(e,t){try{this.logger.logRequest(e),await this.executeMiddlewares(e,t);const r=i.parse(e.url||"",!0),s=r.pathname||"/";if("OPTIONS"===e.method)return h(t,this.config.corsOrigins),t.writeHead(204),void t.end();const n=this.routes.get(s);if(n)return void await n(e,t);if("/dist"===s)return void await this.handleDistRequest(e,t,r.query);await this.handleDefaultRequest(e,t,s)}catch(e){await async function(e,t,i){console.error("Server error:",e);const r=e.statusCode||500,s=function(e,t){return`\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Error ${e}</title>\n        <style>\n            body { font-family: system-ui; padding: 2rem; max-width: 600px; margin: 0 auto; }\n            .error { background: #f8d7da; border: 1px solid #f5c6cb; padding: 1rem; border-radius: 4px; }\n        </style>\n    </head>\n    <body>\n        <h1>Error ${e}</h1>\n        <div class="error">\n            <p>${t}</p>\n        </div>\n    </body>\n    </html>\n  `}(r,e.message);i.writeHead(r,{"Content-Type":"text/html","Cache-Control":"no-store"}),i.end(s)}(e instanceof Error?e:new Error("Unknown error"),0,t)}}async handleDistRequest(e,t,i){const r=i.projectPath||"./",s=i.entryPoint||"main.js",n=await u(r,s),a=(l=n,o.createHash("md5").update(l).digest("hex"));var l;if(e.headers["if-none-match"]===a)return t.writeHead(304),void t.end();h(t,this.config.corsOrigins),t.writeHead(200,{"Content-Type":"application/javascript","Cache-Control":`public, max-age=${this.config.cacheMaxAge}`,ETag:a});const c=e.headers["accept-encoding"]||"";if(this.config.compression&&c.includes("gzip")){const e=await g(n);t.setHeader("Content-Encoding","gzip"),t.end(e)}else t.end(n)}async handleDefaultRequest(e,i,s){const n=r.join(__dirname,"index.html");let o=await t.promises.readFile(n,"utf-8");o=function(e,t={},i={}){const r={...i,...t},s=`\n      <meta charset="${r.charset}">\n      <meta name="viewport" content="${r.viewport}">\n      <meta name="description" content="${r.description}">\n      <title>${r.title}</title>\n    `;return e.replace("</head>",`${s}</head>`)}(o,{title:`Page - ${s}`,description:`Content for ${s}`},this.config.defaultMeta),i.writeHead(200,{"Content-Type":"text/html","Cache-Control":"no-cache"}),i.end(o)}async start(){return new Promise((t=>{this.server=e.createServer(((e,t)=>this.handleRequest(e,t))),this.server.listen(this.config.port,(()=>{this.logger.log(`AeroSSR server running on port ${this.config.port}`),t(this.server)}))}))}async stop(){return this.server?new Promise((e=>{this.server?.close((()=>{this.logger.log("Server stopped"),this.server=null,e()}))})):Promise.resolve()}}}));
//# sourceMappingURL=index.js.map
