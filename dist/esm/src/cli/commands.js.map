{"version":3,"file":"commands.js","sources":["../../../../../src/cli/commands.ts"],"sourcesContent":["import { promises as fs } from 'fs';\r\nimport path from 'path';\r\nimport { AeroSSR, StaticFileMiddleware } from '../';\r\n\r\nexport async function initializeSSR(directory: string): Promise<void> {\r\n    const projectRoot = path.resolve(directory);\r\n    const publicDir = path.join(projectRoot, 'public');\r\n    const logDir = path.join(projectRoot, 'logs');\r\n    const logFilePath = path.join(logDir, 'server.log');\r\n\r\n    // Ensure directories exist\r\n    await fs.mkdir(publicDir, { recursive: true });\r\n    await fs.mkdir(logDir, { recursive: true });\r\n\r\n    // Create a default index.html file\r\n    const indexHtmlPath = path.join(publicDir, 'index.html');\r\n    const defaultHtmlContent = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n        <meta charset=\"UTF-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <title>AeroSSR App</title>\r\n</head>\r\n<body>\r\n        <h1>Welcome to AeroSSR</h1>\r\n        <div id=\"app\"></div>\r\n</body>\r\n</html>\r\n    `;\r\n    await fs.writeFile(indexHtmlPath, defaultHtmlContent, 'utf-8');\r\n\r\n    // Create an empty log file\r\n    await fs.writeFile(logFilePath, '', 'utf-8');\r\n\r\n    console.log(`Initialized a new AeroSSR project in ${projectRoot}`);\r\n}\r\n\r\nexport function configureMiddleware(app: AeroSSR, path: any): void {\r\n    // Add static file middleware\r\n    app.use(new StaticFileMiddleware({\r\n        root: 'public',\r\n        maxAge: 86400, // Cache for 1 day\r\n        index: ['index.html'],\r\n        dotFiles: 'ignore',\r\n        compression: true,\r\n        etag: true,\r\n    }).middleware());\r\n\r\n    // Add logging middleware\r\n    app.use(async (req, res, next) => {\r\n        const start = Date.now();\r\n        await next();\r\n        console.log(`${req.method} ${req.url} - ${Date.now() - start}ms`);\r\n    });\r\n\r\n    // Add error handling middleware\r\n    app.use(async (req, res, next) => {\r\n        try {\r\n            await next();\r\n        } catch (error) {\r\n            console.error(error);\r\n            res.writeHead(500);\r\n            res.end('Internal Server Error');\r\n        }\r\n    });\r\n}\r\n\r\n"],"names":["path","fs"],"mappings":";;;;AAIO,eAAe,aAAa,CAAC,SAAiB,EAAA;IACjD,MAAM,WAAW,GAAGA,aAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAC5C,MAAM,SAAS,GAAGA,aAAI,CAAC,IAAI,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;IACnD,MAAM,MAAM,GAAGA,aAAI,CAAC,IAAI,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC9C,MAAM,WAAW,GAAGA,aAAI,CAAC,IAAI,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;;AAGpD,IAAA,MAAMC,QAAE,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;AAC/C,IAAA,MAAMA,QAAE,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;;IAG5C,MAAM,aAAa,GAAGD,aAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;AACzD,IAAA,MAAM,kBAAkB,GAAG,CAAA;;;;;;;;;;;;;KAa1B,CAAC;IACF,MAAMC,QAAE,CAAC,SAAS,CAAC,aAAa,EAAE,kBAAkB,EAAE,OAAO,CAAC,CAAC;;IAG/D,MAAMA,QAAE,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;AAE7C,IAAA,OAAO,CAAC,GAAG,CAAC,wCAAwC,WAAW,CAAA,CAAE,CAAC,CAAC;AACvE,CAAC;AAEe,SAAA,mBAAmB,CAAC,GAAY,EAAE,IAAS,EAAA;;AAEvD,IAAA,GAAG,CAAC,GAAG,CAAC,IAAI,oBAAoB,CAAC;AAC7B,QAAA,IAAI,EAAE,QAAQ;AACd,QAAA,MAAM,EAAE,KAAK;QACb,KAAK,EAAE,CAAC,YAAY,CAAC;AACrB,QAAA,QAAQ,EAAE,QAAQ;AAClB,QAAA,WAAW,EAAE,IAAI;AACjB,QAAA,IAAI,EAAE,IAAI;AACb,KAAA,CAAC,CAAC,UAAU,EAAE,CAAC,CAAC;;IAGjB,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;AAC7B,QAAA,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;QACzB,MAAM,IAAI,EAAE,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,CAAA,EAAG,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,GAAG,CAAM,GAAA,EAAA,IAAI,CAAC,GAAG,EAAE,GAAG,KAAK,CAAA,EAAA,CAAI,CAAC,CAAC;AACtE,KAAC,CAAC,CAAC;;IAGH,GAAG,CAAC,GAAG,CAAC,OAAO,GAAG,EAAE,GAAG,EAAE,IAAI,KAAI;QAC7B,IAAI;YACA,MAAM,IAAI,EAAE,CAAC;AAChB,SAAA;AAAC,QAAA,OAAO,KAAK,EAAE;AACZ,YAAA,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;AACrB,YAAA,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;AACnB,YAAA,GAAG,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC;AACpC,SAAA;AACL,KAAC,CAAC,CAAC;AACP;;;;"}