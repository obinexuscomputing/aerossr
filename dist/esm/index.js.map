{"version":3,"file":"index.js","sources":["../../src/index.ts"],"sourcesContent":["/// <reference path=\"./types/index.ts\"/>\r\nimport { IncomingMessage, Server, ServerResponse } from 'http';\r\nimport { AeroSSRConfig, StaticFileOptions, LoggerOptions, CacheStore, MetaTags } from './@types';\r\n\r\nexport { AeroSSRConfig, StaticFileOptions, LoggerOptions, CacheStore, MetaTags };\r\nexport *  from './middleware';\r\n\r\nexport type RouteHandler = (\r\n    req: IncomingMessage,\r\n    res: ServerResponse\r\n) => Promise<void> | void;\r\n\r\nexport type Middleware = (\r\n    req: IncomingMessage,\r\n    res: ServerResponse,\r\n    next: () => Promise<void>\r\n) => Promise<void>;\r\n\r\ndeclare namespace AeroSSR {\r\n    export class Core {\r\n        constructor(config?: AeroSSRConfig);\r\n        start(): Promise<Server>;\r\n        stop(): Promise<void>;\r\n        use(middleware: Middleware): void;\r\n        route(path: string, handler: RouteHandler): void;\r\n        readonly config: Required<AeroSSRConfig>;\r\n    }\r\n     \r\n    export namespace Middleware {\r\n        class StaticFile {\r\n            constructor(options: StaticFileOptions);\r\n            middleware(): Middleware;\r\n        }\r\n    }\r\n\r\n    export namespace Utils {\r\n        class Logger {\r\n            constructor(options?: LoggerOptions);\r\n            log(message: string): void;\r\n            logRequest(req: IncomingMessage): void;\r\n        }\r\n\r\n        export namespace Cache {\r\n            function create<T>(): CacheStore<T>;\r\n        }\r\n\r\n        export namespace HTTP {\r\n            function setCorsHeaders(res: ServerResponse, origins?: string): void;\r\n            function generateETag(content: string | Buffer): string;\r\n        }\r\n\r\n        export  namespace Error {\r\n            function generatePage(statusCode: number, message: string): string;\r\n            function handle(\r\n                error: Error & { statusCode?: number },\r\n                req: IncomingMessage,\r\n                res: ServerResponse\r\n            ): Promise<void>;\r\n        }\r\n\r\n        export  namespace HTML {\r\n            function injectMetaTags(\r\n                html: string,\r\n                meta?: MetaTags,\r\n                defaultMeta?: MetaTags\r\n            ): string;\r\n        }\r\n\r\n        export namespace Bundle {\r\n            function generate(projectPath: string, entryPoint: string): Promise<string>;\r\n        }\r\n    }\r\n}\r\n\r\nexport { AeroSSR } from './AeroSSR'\r\nexport default AeroSSR.Core; "],"names":[],"mappings":";;;AA2EA,YAAe,OAAO,CAAC,IAAI;;;;"}