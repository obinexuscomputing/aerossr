{"version":3,"file":"logger.js","sources":["../../../../src/utils/logger.ts"],"sourcesContent":["// src/utils/logger.ts\r\nimport * as fs from 'fs/promises';\r\nimport { existsSync, mkdirSync, constants } from 'fs';\r\nimport { IncomingMessage } from 'http';\r\nimport path from 'path';\r\n\r\nexport interface LoggerOptions {\r\n  logFilePath?: string | null;\r\n  logLevel?: 'debug' | 'info' | 'warn' | 'error';\r\n  maxFileSize?: number;\r\n  maxFiles?: number;\r\n  format?: 'json' | 'text';\r\n}\r\n\r\nexport class Logger {\r\n  private logFilePath: string | null;\r\n  private readonly options: Required<LoggerOptions>;\r\n  private static readonly DEFAULT_OPTIONS: Required<LoggerOptions> = {\r\n    logFilePath: null,\r\n    logLevel: 'info',\r\n    maxFileSize: 10 * 1024 * 1024, // 10MB\r\n    maxFiles: 5,\r\n    format: 'text'\r\n  };\r\n\r\n  constructor(options: LoggerOptions = {}) {\r\n    this.options = { ...Logger.DEFAULT_OPTIONS, ...options };\r\n    this.logFilePath = this.options.logFilePath;\r\n\r\n    if (this.logFilePath) {\r\n      try {\r\n        this.initializeLogFile();\r\n      } catch (error) {\r\n        console.error(\r\n          `Logger initialization failed for path: ${this.logFilePath} - ${(error as Error).message}`\r\n        );\r\n        this.logFilePath = null;\r\n      }\r\n    }\r\n  }\r\n\r\n  private initializeLogFile(): void {\r\n    const logDir = path.dirname(this.logFilePath!);\r\n    \r\n    if (!existsSync(logDir)) {\r\n      try {\r\n        mkdirSync(logDir, { recursive: true });\r\n      } catch (error) {\r\n        throw new Error(`Failed to create log directory: ${(error as Error).message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public getLogPath(): string | null {\r\n    return this.logFilePath;\r\n  }\r\n\r\n  private formatMessage(message: string): string {\r\n    const timestamp = new Date().toISOString();\r\n    if (this.options.format === 'json') {\r\n      return JSON.stringify({\r\n        timestamp,\r\n        message,\r\n        level: this.options.logLevel\r\n      }) + '\\n';\r\n    }\r\n    return `[${timestamp}] ${message}\\n`;\r\n  }\r\n\r\n  public async log(message: string): Promise<void> {\r\n    const formattedMessage = this.formatMessage(message);\r\n    console.log(formattedMessage.trim());\r\n\r\n    if (this.logFilePath) {\r\n      try {\r\n        await fs.appendFile(this.logFilePath, formattedMessage, 'utf-8');\r\n      } catch (error) {\r\n        console.error(`Failed to write to log file: ${(error as Error).message}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  public logRequest(req: IncomingMessage): void {\r\n    const { method = 'undefined', url = 'undefined', headers = {} } = req;\r\n    const userAgent = headers['user-agent'] || 'unknown';\r\n    const logMessage = `${method} ${url} - ${userAgent}`;\r\n    this.log(logMessage);\r\n  }\r\n\r\n  public async clear(): Promise<void> {\r\n    if (this.logFilePath && existsSync(this.logFilePath)) {\r\n      try {\r\n        await fs.writeFile(this.logFilePath, '', 'utf-8');\r\n      } catch (error) {\r\n        console.error(`Failed to clear log file: ${(error as Error).message}`);\r\n      }\r\n    }\r\n  }\r\n}"],"names":[],"mappings":"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"}