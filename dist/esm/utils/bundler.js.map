{"version":3,"file":"bundler.js","sources":["../../../../src/utils/bundler.ts"],"sourcesContent":["// src/utils/bundler.ts\r\nimport * as fs from 'fs/promises';\r\nimport * as path from 'path';\r\n\r\ninterface DependencyOptions {\r\n  extensions?: string[];\r\n  maxDepth?: number;\r\n}\r\n\r\n/**\r\n * Resolves all dependencies for a given file\r\n */\r\nexport async function resolveDependencies(\r\n  filePath: string,\r\n  deps: Set<string> = new Set(),\r\n  options: DependencyOptions = {},\r\n  depth = 0\r\n): Promise<Set<string>> {\r\n  const {\r\n    extensions = ['.js', '.ts'],\r\n    maxDepth = 100\r\n  } = options;\r\n\r\n  // Prevent infinite recursion\r\n  if (depth > maxDepth || deps.has(filePath)) {\r\n    return deps;\r\n  }\r\n\r\n  try {\r\n    deps.add(filePath);\r\n    const content = await fs.readFile(filePath, 'utf-8');\r\n\r\n    // Match both require() and import statements\r\n    const importMatches = content.match(/(?:require\\s*\\(['\"]([^'\"]+)['\"]\\)|import\\s+.*?from\\s+['\"]([^'\"]+)['\"])/g) || [];\r\n\r\n    for (const match of importMatches) {\r\n      const depPath = match.match(/['\"]([^'\"]+)['\"]/)?.[1];\r\n      if (!depPath) continue;\r\n\r\n      try {\r\n        let fullPath = path.resolve(path.dirname(filePath), depPath);\r\n        \r\n        // Add extension if needed\r\n        if (!extensions.some(ext => depPath.endsWith(ext))) {\r\n          for (const ext of extensions) {\r\n            try {\r\n              await fs.access(fullPath + ext);\r\n              fullPath += ext;\r\n              break;\r\n            } catch {\r\n              continue;\r\n            }\r\n          }\r\n        }\r\n\r\n        if (extensions.some(ext => fullPath.endsWith(ext))) {\r\n          await resolveDependencies(fullPath, deps, options, depth + 1);\r\n        }\r\n      } catch (err) {\r\n        console.warn(`Warning: Could not resolve dependency ${depPath} in ${filePath}`);\r\n      }\r\n    }\r\n  } catch (err) {\r\n    throw new Error(`Error processing ${filePath}: ${err instanceof Error ? err.message : String(err)}`);\r\n  }\r\n\r\n  return deps;\r\n}\r\n\r\n/**\r\n * Minifies JavaScript code while preserving string contents\r\n */\r\nexport function minifyBundle(code: string): string {\r\n  if (!code.trim()) return '';\r\n\r\n  return code\r\n    // Remove multi-line comments\r\n    .replace(/\\/\\*[\\s\\S]*?\\*\\//g, '')\r\n    // Remove single-line comments (but not URLs in strings)\r\n    .replace(/([^:]|^)\\/\\/[^\\n]*/g, '$1')\r\n    // Replace multiple spaces with single space (preserve string contents)\r\n    .split(/\"[^\"]*\"|'[^']*'/)\r\n    .map((part, i) => i % 2 === 0 ? part.replace(/\\s+/g, ' ').trim() : part)\r\n    .join('')\r\n    // Remove spaces around operators and brackets (outside strings)\r\n    .replace(/\\s*([+\\-*/%=<>!&|^~?:,;{}[\\]()])\\s*/g, '$1')\r\n    .trim();\r\n}\r\n\r\n/**\r\n * Generates a bundled JavaScript file from an entry point\r\n */\r\nexport async function generateBundle(projectPath: string, entryPoint: string): Promise<string> {\r\n  const entryFilePath = path.join(projectPath, entryPoint);\r\n  let bundle = '';\r\n\r\n  try {\r\n    const dependencies = await resolveDependencies(entryFilePath);\r\n    \r\n    for (const dep of dependencies) {\r\n      const content = await fs.readFile(dep, 'utf-8');\r\n      const relativePath = path.relative(projectPath, dep);\r\n      bundle += `\\n// File: ${relativePath}\\n${content}\\n`;\r\n    }\r\n\r\n    return minifyBundle(bundle);\r\n  } catch (err) {\r\n    throw new Error(\r\n      `Failed to generate bundle from ${entryPoint}: ${err instanceof Error ? err.message : String(err)}`\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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"}