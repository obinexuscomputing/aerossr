{"version":3,"file":"SecurityMiddleware.js","sources":["../../../../src/middlewares/SecurityMiddleware.ts"],"sourcesContent":["import { IncomingMessage, ServerResponse } from 'http';\r\n\r\ndeclare module 'http' {\r\n  interface IncomingMessage {\r\n    body?: any;\r\n  }\r\n}\r\n\r\nexport class SecurityMiddleware {\r\n  /**\r\n   * CSRF Protection Middleware\r\n   */\r\n  static async csrfProtection(req: IncomingMessage, res: ServerResponse): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      const token = req.headers['x-csrf-token'];\r\n      if (!token || token !== 'your-csrf-token') {\r\n        res.writeHead(403, { 'Content-Type': 'text/plain' });\r\n        res.end('CSRF token missing or invalid');\r\n        return reject(new Error('CSRF token missing or invalid'));\r\n      }\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Rate Limiting Middleware\r\n   */\r\n  static rateLimit(limit: number, windowMs: number): (req: IncomingMessage, res: ServerResponse) => Promise<void> {\r\n    const requests = new Map<string, { count: number; timestamp: number }>();\r\n\r\n    return async (req, res): Promise<void> => {\r\n      return new Promise((resolve, reject) => {\r\n        const ip = req.socket.remoteAddress || '';\r\n        const now = Date.now();\r\n        const record = requests.get(ip) || { count: 0, timestamp: now };\r\n\r\n        if (now - record.timestamp > windowMs) {\r\n          requests.set(ip, { count: 1, timestamp: now });\r\n          return resolve();\r\n        }\r\n\r\n        record.count += 1;\r\n        requests.set(ip, record);\r\n\r\n        if (record.count > limit) {\r\n          res.writeHead(429, { 'Content-Type': 'text/plain' });\r\n          res.end('Too many requests');\r\n          return reject(new Error('Too many requests'));\r\n        }\r\n\r\n        resolve();\r\n      });\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Security Headers Middleware\r\n   */\r\n  static async securityHeaders(_req: IncomingMessage, res: ServerResponse): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      res.setHeader('X-Content-Type-Options', 'nosniff');\r\n      res.setHeader('X-Frame-Options', 'DENY');\r\n      res.setHeader('Strict-Transport-Security', 'max-age=31536000; includeSubDomains');\r\n      res.setHeader('Content-Security-Policy', \"default-src 'self'\");\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Input Sanitization Middleware\r\n   */\r\n  static async sanitizeInput(req: IncomingMessage, res: ServerResponse): Promise<void> {\r\n    return new Promise((resolve) => {\r\n      const sanitize = (input: string): string => {\r\n        return input.replace(/[&<>\"'\\/]/g, (char) => {\r\n          const escapeChars: { [key: string]: string } = {\r\n            '&': '&amp;',\r\n            '<': '&lt;',\r\n            '>': '&gt;',\r\n            '\"': '&quot;',\r\n            \"'\": '&#39;',\r\n            '/': '&#x2F;',\r\n          };\r\n          return escapeChars[char] || char;\r\n        });\r\n      };\r\n\r\n      if (req.method === 'POST' || req.method === 'PUT') {\r\n        let body = '';\r\n        req.on('data', (chunk) => {\r\n          body += chunk.toString();\r\n        });\r\n\r\n        req.on('end', () => {\r\n          try {\r\n            const parsedBody = JSON.parse(body);\r\n            for (const key in parsedBody) {\r\n              if (typeof parsedBody[key] === 'string') {\r\n                parsedBody[key] = sanitize(parsedBody[key]);\r\n              }\r\n            }\r\n            req.body = parsedBody;\r\n            resolve();\r\n          } catch (err) {\r\n            res.writeHead(400, { 'Content-Type': 'text/plain' });\r\n            res.end('Invalid JSON');\r\n            return;\r\n          }\r\n        });\r\n      } else {\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}